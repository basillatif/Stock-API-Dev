install.packages(c("forcats", "PerformanceAnalytics", "plotly", "rvest", "tidyverse"))
library(tidyverse)
library(stringr)
stockdat = read.csv("/Users/jianxu/Downloads/phd stuff/googl_data.csv")
plot(stockdat$Date,stockdat$Close)
lines(stockdat$Date,stockdat$Close,col="blue",type="l")
lines(stockdat$Date,stockdat$Open,col= "red",type = "l",lwd=.5)
library(quantmod)
library(xts)
library(rvest)
library(tidyverse)
library(stringr)
library(forcats)
library(lubridate)
library(plotly)
library(corrplot)
library(dplyr)
library(PerformanceAnalytics)
getSymbols("GOOGL",from="2004-08-20",to="2019-11-15")
GOOGL_log_returns<-GOOGL%>%Ad()%>%dailyReturn(type='log')
GOOGL_mean_log<-mean(GOOGL_log_returns)
mean_log<-round(GOOGL_mean_log,4)
GOOGL_sd_Log<-sd(GOOGL_log_returns)
sd_log<-round(GOOGL_sd_Log,4)
graphic1<-data.frame(mean_log,sd_log)
rownames(graphic1)<-c("GOOGL")
colnames(graphic1)<-c("Mean_Log_Return", "Sd_Log_Return")
xlab<-list(title="Reward",titlefont=F)
ylab<-list(title="Risk", titlefont=F)
plot_ly(x=graphic1[,1],y=graphic1[,2],text=rownames(graphic1),type='scatter',mode="markers",marker=list(color=c("black","blue","red","grey","green")))%>%layout(title="Risk v Reward",xaxis=xlab,yaxis=ylab)
GOOGL%>%Ad()%>%chartSeries()
GOOGL%>%chartSeries(TA='addBBands();addBBands(draw="p");addVo();addMACD()',subset='2019')
probs<-c(0.005,0.025,0.25,0.5,0.75,0.975,0.995)
GOOGL_dist<-GOOGL_log_returns%>%quantile(probs=probs,na.rm=TRUE)
GOOGL_mean<-mean(GOOGL_log_returns,na.rm=TRUE)
GOOGL_sd<-sd(GOOGL_log_returns,na.rm=TRUE)
GOOGL_mean%>%exp() # 1.00083
#random walk: Rooted in past performance is not an indicator of future results. Price fluctuations can not be predicted with accuracy
mu<-GOOGL_mean_log
sig<-GOOGL_sd_Log
testsim<-rep(NA,252*1)
#generate random daily exponent increase rate using AMZN's mean and sd log returns
#one year 252 trading days, simulate for 4 years
# 4*252 trading days
price<-rep(NA,252*1)
#most recent price
price[1]<-as.numeric(GOOGL$GOOGL.Adjusted[length(GOOGL$GOOGL.Adjusted),])
#start simulating prices
for(i in 2:length(testsim)){
price[i]<-price[i-1]*exp(rnorm(1,mu,sig))
}
random_data<-cbind(price,1:(252*1))
colnames(random_data)<-c("Price","Day")
random_data<-as.data.frame(random_data)
random_data%>%ggplot(aes(Day,Price))+geom_line()+labs(title="Google (GOOGL) price simulation for 4 years")+theme_bw()
#monte carlo simulation: incredibly useful forecasting tool to predict outcomes of events with many random variables
N<-500
mc_matrix<-matrix(nrow=252*1,ncol=N)
mc_matrix[1,1]<-as.numeric(GOOGL$GOOGL.Adjusted[length(GOOGL$GOOGL.Adjusted),])
for(j in 1:ncol(mc_matrix)){
mc_matrix[1,j]<-as.numeric(GOOGL$GOOGL.Adjusted[length(GOOGL$GOOGL.Adjusted),])
for(i in 2:nrow(mc_matrix)){
mc_matrix[i,j]<-mc_matrix[i-1,j]*exp(rnorm(1,mu,sig))
}
}
name<-str_c("Sim ",seq(1,500))
name<-c("Day",name)
final_mat<-cbind(1:(252*1),mc_matrix)
final_mat<-as.tibble(final_mat)
colnames(final_mat)<-name
dim(final_mat) #1008 501
final_mat%>%gather("Simulation","Price",2:501)%>%ggplot(aes(x=Day,y=Price,Group=Simulation))+geom_line(alpha=0.2)+labs(title="Google Stock (GOOGL): 500 Monte Carlo Simulations for 4 Years")+theme_bw()
#is it likely? Check the confidence interval
final_mat[252*1,-1]%>%as.numeric()%>%quantile(probs=probs)
